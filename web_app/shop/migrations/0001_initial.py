# Generated by Django 5.2.5 on 2025-09-02 10:54

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('website', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='shop.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('image', models.ImageField(upload_to='products/')),
                ('image_alt', models.CharField(blank=True, max_length=200)),
                ('stock_status', models.CharField(choices=[('in_stock', 'In Stock'), ('limited', 'Limited Stock'), ('pre_order', 'Pre-Order'), ('out_of_stock', 'Out of Stock')], default='in_stock', max_length=20)),
                ('stock_quantity', models.PositiveIntegerField(default=0)),
                ('low_stock_threshold', models.PositiveIntegerField(default=5)),
                ('sku', models.CharField(blank=True, max_length=50, unique=True)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('year_released', models.PositiveIntegerField(blank=True, null=True)),
                ('rating_stars', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_count', models.PositiveIntegerField(default=0)),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('meta_keywords', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_limited_edition', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JewelrySpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jewelry_type', models.CharField(choices=[('ring', 'Ring'), ('necklace', 'Necklace'), ('bracelet', 'Bracelet'), ('earrings', 'Earrings'), ('pendant', 'Pendant'), ('brooch', 'Brooch'), ('cufflinks', 'Cufflinks'), ('anklet', 'Anklet')], max_length=20)),
                ('metal_type', models.CharField(choices=[('gold_14k', '14K Gold'), ('gold_18k', '18K Gold'), ('gold_24k', '24K Gold'), ('white_gold', 'White Gold'), ('rose_gold', 'Rose Gold'), ('platinum', 'Platinum'), ('silver', 'Sterling Silver'), ('titanium', 'Titanium'), ('stainless_steel', 'Stainless Steel')], max_length=20)),
                ('metal_purity', models.CharField(blank=True, help_text='e.g., 750, 925', max_length=20)),
                ('metal_weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in grams', max_digits=8, null=True)),
                ('has_gemstones', models.BooleanField(default=False)),
                ('primary_gemstone', models.CharField(blank=True, choices=[('diamond', 'Diamond'), ('ruby', 'Ruby'), ('sapphire', 'Sapphire'), ('emerald', 'Emerald'), ('pearl', 'Pearl'), ('opal', 'Opal'), ('topaz', 'Topaz'), ('amethyst', 'Amethyst'), ('garnet', 'Garnet'), ('turquoise', 'Turquoise')], max_length=20)),
                ('gemstone_carat', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('gemstone_clarity', models.CharField(blank=True, help_text='e.g., VS1, VVS2', max_length=50)),
                ('gemstone_color', models.CharField(blank=True, max_length=50)),
                ('gemstone_cut', models.CharField(blank=True, help_text='e.g., Round, Princess, Emerald', max_length=50)),
                ('stone_count', models.PositiveIntegerField(blank=True, null=True)),
                ('length', models.CharField(blank=True, help_text='Overall length', max_length=50)),
                ('width', models.CharField(blank=True, help_text='Overall width', max_length=50)),
                ('thickness', models.CharField(blank=True, help_text='Thickness/height', max_length=50)),
                ('ring_size', models.CharField(blank=True, help_text='Ring size if applicable', max_length=20)),
                ('chain_length', models.CharField(blank=True, help_text='Chain length if applicable', max_length=20)),
                ('pendant_dimensions', models.CharField(blank=True, max_length=100)),
                ('style', models.CharField(blank=True, help_text='e.g., Vintage, Modern, Art Deco', max_length=100)),
                ('finish', models.CharField(blank=True, help_text='e.g., Polished, Brushed, Matte', max_length=100)),
                ('setting_type', models.CharField(blank=True, help_text='e.g., Prong, Bezel, Pave', max_length=100)),
                ('care_instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='jewelry_specs', to='shop.product')),
            ],
            options={
                'verbose_name': 'Jewelry Specification',
                'verbose_name_plural': 'Jewelry Specifications',
            },
        ),
        migrations.CreateModel(
            name='ProductCustomization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customization_type', models.CharField(choices=[('engraving', 'Engraving'), ('band_color', 'Band Color'), ('case_material', 'Case Material'), ('dial_color', 'Dial Color'), ('gemstone', 'Gemstone'), ('metal_type', 'Metal Type'), ('size', 'Size'), ('length', 'Length')], max_length=20)),
                ('name', models.CharField(help_text='Display name for this option', max_length=100)),
                ('value', models.CharField(help_text='Internal value for this option', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional cost for this option', max_digits=10)),
                ('is_available', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customizations', to='shop.product')),
            ],
            options={
                'verbose_name': 'Product Customization',
                'verbose_name_plural': 'Product Customizations',
                'ordering': ['customization_type', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/gallery/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='shop.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=100)),
                ('customer_email', models.EmailField(max_length=254)),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='shop.product')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WatchSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_material', models.CharField(choices=[('stainless_steel', 'Stainless Steel'), ('gold', 'Gold'), ('rose_gold', 'Rose Gold'), ('white_gold', 'White Gold'), ('platinum', 'Platinum'), ('titanium', 'Titanium'), ('ceramic', 'Ceramic'), ('carbon_fiber', 'Carbon Fiber'), ('bronze', 'Bronze'), ('aluminum', 'Aluminum')], max_length=20)),
                ('case_size', models.CharField(help_text='e.g., 42mm, 40mm', max_length=20)),
                ('case_thickness', models.CharField(blank=True, help_text='e.g., 12mm', max_length=20)),
                ('case_shape', models.CharField(blank=True, help_text='e.g., Round, Square, Tonneau', max_length=50)),
                ('movement', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual'), ('quartz', 'Quartz'), ('chronograph', 'Chronograph'), ('smartwatch', 'Smartwatch'), ('solar', 'Solar'), ('kinetic', 'Kinetic')], max_length=20)),
                ('movement_caliber', models.CharField(blank=True, help_text='e.g., Cal. 3135', max_length=100)),
                ('power_reserve', models.CharField(blank=True, help_text='e.g., 48 hours', max_length=50)),
                ('jewels', models.PositiveIntegerField(blank=True, null=True)),
                ('frequency', models.CharField(blank=True, help_text='e.g., 28,800 vph', max_length=50)),
                ('dial_color', models.CharField(blank=True, max_length=50)),
                ('dial_material', models.CharField(blank=True, max_length=100)),
                ('hands_style', models.CharField(blank=True, max_length=100)),
                ('markers_type', models.CharField(blank=True, max_length=100)),
                ('complications', models.TextField(blank=True, help_text='Date, GMT, Chronograph, etc.')),
                ('crystal_type', models.CharField(blank=True, choices=[('sapphire', 'Sapphire Crystal'), ('mineral', 'Mineral Crystal'), ('acrylic', 'Acrylic'), ('gorilla_glass', 'Gorilla Glass')], max_length=20)),
                ('water_resistance', models.CharField(help_text='e.g., 100m, 300m', max_length=50)),
                ('bracelet_material', models.CharField(blank=True, max_length=100)),
                ('bracelet_color', models.CharField(blank=True, max_length=50)),
                ('clasp_type', models.CharField(blank=True, max_length=100)),
                ('lug_width', models.CharField(blank=True, help_text='e.g., 20mm', max_length=20)),
                ('bezel_type', models.CharField(blank=True, max_length=100)),
                ('bezel_material', models.CharField(blank=True, max_length=100)),
                ('crown_type', models.CharField(blank=True, max_length=100)),
                ('certifications', models.TextField(blank=True, help_text='COSC, Master Chronometer, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='watch_specs', to='shop.product')),
            ],
            options={
                'verbose_name': 'Watch Specification',
                'verbose_name_plural': 'Watch Specifications',
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='shop_produc_slug_76971b_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand', 'category'], name='shop_produc_brand_i_33f772_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='shop_produc_price_3b79b5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active', 'stock_status'], name='shop_produc_is_acti_d10693_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productcustomization',
            unique_together={('product', 'customization_type', 'value')},
        ),
    ]
